-- fearqdb - quote database system
-- Copyright (C) 2012 David Martí <neikokz at gmail dot com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation, either version 3 of the
-- License, or (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.

-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

-- key: the API key. we recommend this to be a md5 or something similar but
--   nothing stops you from using any other value such a word or a password.
-- name: the name of the API, eg: 'Mobile', the name of your IRC bot, etc.
-- approved: if 0, the API key won't work.
-- db: the name of the db this API key works on, or empty if it will work on
--   all dbs
-- "1 - web" comes by default, DO NOT DELETE IT!
CREATE TABLE IF NOT EXISTS `api` (
  `id` INTEGER,
  `key` TEXT,
  `name` TEXT,
  `approved` INTEGER,
  `db` TEXT,
  PRIMARY KEY (`id`)
);

CREATE TABLE IF NOT EXISTS `hits` (
  `id` INTEGER,
  `ip` TEXT,
  `url` TEXT,
  `redir` TEXT,
  `module` TEXT,
  `search` TEXT,
  `db` TEXT,
  `level` TEXT,
  `user` INTEGER,
  `referer` TEXT,
  `user_agent` TEXT,
  `time` TEXT,
  PRIMARY KEY (`id`)
);

CREATE TABLE IF NOT EXISTS `logs` (
  `id` INTEGER,
  `ip` TEXT,
  `time` TEXT,
  `url` TEXT,
  `db` TEXT,
  `text` TEXT,
  PRIMARY KEY (`id`)
);

CREATE TABLE IF NOT EXISTS `quotes` (
  `id` INTEGER,
  `permaid` TEXT,
  `nick` TEXT,
  `timestamp` INTEGER,
  `ip` TEXT,
  `text` TEXT,
  `comment` TEXT,
  `db` TEXT,
  `status` TEXT,
  `hidden` INTEGER,
  `api` INTEGER DEFAULT 1,
  PRIMARY KEY (`id`)
);

-- url: the url up to the WITH leading / and WITH NO http://
--   eg: example.net/qdb/
-- base_url: the base url for your qdb, this is, / + folder + / and, if you have no
--   mod_rewrite, index.php (if you want) + ?m=
--   eg: /
--   eg: /qdb/
--   eg: /qdb/index.php?m=
--   eg: /qdb/?m=
-- full_url: those two urls, merged.
--   eg: http://example.net/qdb/?m=
-- statics_url: the url that includes your static content, WITH the leading /
--   eg: http://qdb.example.net/statics/
--   eg: http://qdbstatic.net/
-- site_key: your site key; used to generate passwords, cookies and so on.
--   in case of disclosure, just change it.
-- lang: your language, for gettext.
--   eg: es
-- locale: your locale, for gettext.
--   eg: es_ES.UTF-8
-- collate: database collation for the search module.
--   eg: utf8_spanish_ci
--   This way if you do a search with "que", it will find "que" and "qué", which
--   is useful.
-- ip_show: whether ip addresses will be shown on the website.
--   ** authorised API key owners can read all IP addresses, it doesn't matter **
--   **                   whether you set ip_show on or off                    **
-- analytics_enabled: include Google Analytics javascript code
-- analytics_code: your GA account
--   eg: UA-13371488-1
-- snowstorm: snow storm!
-- db: matches the 'db' field in all the other tables. allows you to have several
--   domains running in the same database/tables and using the same code.
-- irc: a brief description of where your irc channel is.
--   eg: "#goddammit at EFnet"
-- name: the name of your site used in the header, in the <title>, etc
--   eg: "#goddammit quote database"
-- nname: short name of your site, one word
--   eg: gddmtqdb
-- cookie: the name of the cookie your site will use
--   eg: qdb_session
-- privacy_level: privacy level for quotes for normal web users.
--   -1: all quotes are shown, even the hidden ones
--    0: normal
--    1: all quotes are hidden, but nick/date are visible
--    2: you have to be logged in to actually read any quote
-- privacy_level_for_bots: same but for bots, don't rely on this since a normal
--   user can change his/her user agent and make him/her look like a bot!
-- page_size: quotes per page
-- robots: 'disallow' to block robots via robots.txt
-- topic_text: content of the last topic that was set. it will be shown in every page.
-- topic_nick: nick of the person who set that topic.
-- push_enabled: push notifications enabled. requires curl
-- push_url: push url
-- extra_css: css code that will be included inline, inside <head>
-- approved_quotes: no. of approved quotes, used to avoid count(1) on each page
-- pending_quotes: no. of pending quotes, used to avoid count(1) on each page for admins

CREATE TABLE IF NOT EXISTS `sites` (
  `id` INTEGER,
  `url` TEXT,
  `base_url` TEXT,
  `full_url` TEXT,
  `statics_url` TEXT,
  `site_key` TEXT,
  `lang` TEXT,
  `locale` TEXT,
  `collate` TEXT,
  `ip_show` INTEGER,
  `analytics_enabled` INTEGER,
  `analytics_code` TEXT,
  `snowstorm` INTEGER,
  `db` TEXT,
  `irc` TEXT,
  `name` TEXT,
  `nname` TEXT,
  `cookie` TEXT,
  `privacy_level` INTEGER,
  `privacy_level_for_bots` INTEGER,
  `page_size` INTEGER,
  `robots` TEXT,
  `topic_text` TEXT,
  `topic_nick` TEXT,
  `push_enabled` INTEGER,
  `push_url` TEXT,
  `push_params` TEXT,
  `extra_css` TEXT,
  `approved_quotes` INTEGER,
  `pending_quotes` INTEGER,
  PRIMARY KEY (`id`)
);

CREATE TABLE IF NOT EXISTS `users` (
  `id` INTEGER,
  `nick` TEXT,
  `password` TEXT,
  `salt` TEXT,
  `db` TEXT,
  PRIMARY KEY (`id`)
);

INSERT INTO `api` (`id`, `key`, `name`, `approved`, `db`) VALUES
(1, '', 'web', 0, '');
